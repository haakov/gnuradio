id: trellis_sccc_decoder_x
label: SCCC Decoder
category: '[Core]/Trellis Coding'
flags: [ python, cpp ]

parameters:
-   id: out_type
    label: Output Type
    dtype: enum
    options: [i, s, b]
    option_labels: [Int, Short, Byte]
    option_attributes:
        io: [int, short, byte]
    hide: part
-   id: o_fsm_args
    label: Outer FSM
    dtype: raw
-   id: o_init_state
    label: Outer Initial State
    dtype: int
    default: '0'
-   id: o_final_state
    label: Outer Final State
    dtype: int
    default: '-1'
-   id: i_fsm_args
    label: Inner FSM
    dtype: raw
-   id: i_init_state
    label: Inner Initial State
    dtype: int
    default: '0'
-   id: i_final_state
    label: Inner Final State
    dtype: int
    default: '-1'
-   id: interleaver
    label: Interleaver
    dtype: raw
-   id: block_size
    label: Block Size
    dtype: int
-   id: iterations
    label: Iterations
    dtype: int
    default: '10'
-   id: siso_type
    label: SISO Type
    dtype: enum
    options: [trellis.TRELLIS_MIN_SUM, trellis.TRELLIS_SUM_PRODUCT]
    option_labels: [Min Sum, Sum Product]

inputs:
-   domain: stream
    dtype: float

outputs:
-   domain: stream
    dtype: ${ out_type.io }

asserts:
- ${ (isinstance(eval(""" o_fsm_args """[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }
- ${ (isinstance(eval(""" i_fsm_args """[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }

templates:
    imports: from gnuradio import trellis
    make: |-
        trellis.sccc_decoder_${out_type}(
                trellis.fsm(${o_fsm_args}),
                ${o_init_state},
                ${o_final_state},
                trellis.fsm(${i_fsm_args}),
                ${i_init_state},
                ${i_final_state},
                trellis.interleaver(${interleaver}),
                ${block_size},
                ${iterations},
                ${siso_type})

cpp_templates:
    includes: [ '#include <gnuradio/trellis/sccc_decoder_blk.h>' ]
    declarations: 'trellis::sccc_decoder_${out_type}::sptr ${id};'
    make: |-
        this->${id} = trellis::sccc_decoder_${out_type}::make(
                trellis::fsm(${o_fsm_args}),
                ${o_init_state},
                ${o_final_state},
                trellis::fsm(${i_fsm_args}),
                ${i_init_state},
                ${i_final_state},
                trellis::interleaver(${interleaver}),
                ${block_size},
                ${iterations},
                ${siso_type});
    link: ['gnuradio-trellis']
    translations:
        'trellis.': 'trellis::'

documentation: |-
    SCCC turbo Decoder.
    The fsm and interleaver arguments are passed directly to the trellis.fsm() and trellis.interleaver() constructors.

file_format: 1
